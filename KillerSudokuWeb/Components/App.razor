<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <title>Killer Sudoku Solver</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      /* Custom thick borders for 3x3 blocks */
      table.sudoku-table {
        border-collapse: collapse;
        margin: 2rem auto;
        border: 4px solid #1a202c; /* dark gray */
        box-shadow: 0 4px 10px rgb(0 0 0 / 0.1);
      }
      table.sudoku-table td {
        width: 48px;
        height: 48px;
        text-align: center;
        vertical-align: middle;
        font-weight: 600;
        font-size: 1.25rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        cursor: default;
        user-select: none;
        transition: background-color 0.3s ease;
        border-style: solid;
        border-width: 0.5px;           /* Thinner inner borders */
        border-color: #cbd5e1;         /* Tailwind slate-300 */
      }

      /* Thicker borders between 3x3 boxes */
      table.sudoku-table td:nth-child(3n) {
        border-right-width: 3px !important;
      }
      table.sudoku-table td:nth-child(3n + 1) {
        border-left-width: 3px !important;
      }
      table.sudoku-table tr:nth-child(3n) td {
        border-bottom-width: 3px !important;
      }
      table.sudoku-table tr:nth-child(3n + 1) td {
        border-top-width: 3px !important;
      }

      /* Light shading for empty cells */
      table.sudoku-table td.empty {
        background-color: #f9fafb; /* Tailwind gray-50 */
        color: #94a3b8; /* Tailwind slate-400 */
      }
      /* Subtle highlight for filled cells */
      table.sudoku-table td:not(.empty) {
        @* background-color: #e0f2fe; /* Tailwind sky-100 */
        color: #0c4a6e; /* Tailwind sky-900 */
        box-shadow: inset 0 0 3px #0284c7; /* sky-600 shadow */
        font-weight: 700; *@
      }
    </style>
  </head>
  <body class="bg-gray-50 min-h-screen flex flex-col items-center justify-center">
    <h2 class="text-4xl font-extrabold text-center text-gray-900 mb-6 tracking-wide">Killer Sudoku Solver</h2>

    <div id="info" class="text-center text-lg font-semibold text-gray-700 mb-4"></div>

    <!-- Flex container for two tables -->
    <div class="flex flex-wrap justify-center gap-10">
      <!-- Animated board -->
      <div>
        <h3 class="text-center text-lg font-semibold text-gray-800 mb-2">Solving...</h3>
        <table id="board" class="sudoku-table shadow-lg"></table>
      </div>

      <!-- Final solved board -->
      <div>
        <h3 class="text-center text-lg font-semibold text-gray-800 mb-2">Solved</h3>
        <table id="solved" class="sudoku-table shadow-lg"></table>
      </div>
    </div>

    <div class="text-center text-lg font-semibold text-gray-700 mb-4">Created by Thomas Vermeulen & Sven Hu (2025)</div>

    <script>
      async function animateSolution() {
        const res = await fetch('/api/solve');
        const data = await res.json();

        const table = document.getElementById('board');
        const info = document.getElementById('info');
        info.textContent = `Solved with ${data.type} in ${data.timeSeconds.toFixed(3)}s`;

        table.innerHTML = '';

        // Create 9x9 table structure once
        for (let r = 0; r < 9; r++) {
          const row = document.createElement('tr');
          for (let c = 0; c < 9; c++) {
            const cell = document.createElement('td');
            cell.className = 'empty';
            row.appendChild(cell);
          }
          table.appendChild(row);
        }

        // Define colors for cages — you can add as many as needed
        const cageColorPalette = [
          '#fee2e2', // red-200
          '#d1fae5', // green-200
          '#bfdbfe', // blue-200
          '#fef3c7', // yellow-200
          '#e9d5ff', // purple-200
          '#fbcfe8', // pink-200
          '#cffafe', // cyan-200
          '#fde68a', // amber-200
          '#fcd34d'  // amber-300
        ];

        // Create solved board once animation is done
        const solvedTable = document.getElementById('solved');
        solvedTable.innerHTML = '';

        for (let r = 0; r < 9; r++) {
          const row = document.createElement('tr');
          for (let c = 0; c < 9; c++) {
            const cell = document.createElement('td');
            console.log(JSON.stringify(data.board));
            const val = data.board[r][c];
            cell.textContent = val > 0 ? val : '';
            if (val === 0) {
              cell.className = 'empty';
            }

            // Optional: same background coloring as animated board
            const cageIndex = data.cageColors?.[r]?.[c];
            if (cageIndex !== undefined && cageIndex >= 0) {
              const bgColor = cageColorPalette[cageIndex % cageColorPalette.length];
              cell.style.backgroundColor = bgColor;
            }

            row.appendChild(cell);
          }
          solvedTable.appendChild(row);
        }  

        // Animate each board snapshot
        for (const board of data.history) {
          for (let r = 0; r < 9; r++) {
            for (let c = 0; c < 9; c++) {
              const val = board[r][c];
              const cell = table.rows[r].cells[c];

              cell.textContent = val > 0 ? val : '';
              if (val === 0) {
                cell.className = 'empty';
              } else {
                cell.className = '';
              }

              // Apply cage color background
              const cageIndex = data.cageColors[r][c];
              if (cageIndex !== undefined && cageIndex >= 0) {
                const bgColor = cageColorPalette[cageIndex % cageColorPalette.length];
                cell.style.backgroundColor = bgColor;
              } else {
                // fallback background for cells without cage color info
                cell.style.backgroundColor = val === 0 ? '#f9fafb' : '';
              }
            }
          }
          await new Promise(res => setTimeout(res, 50));  // 50ms delay between frames
        }
      }

      animateSolution();



    </script>
  </body>
</html>
